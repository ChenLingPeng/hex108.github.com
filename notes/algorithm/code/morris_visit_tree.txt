#include <iostream>
#include <vector>

using namespace std;

struct TreeNode{
    int val;
    TreeNode *left, *right;
    TreeNode(int v){ val = v; left = NULL; right = NULL; }
    void set_leaf(TreeNode *left_child, TreeNode *right_child){
        left = left_child;
        right = right_child;
    }
};

// in-order visit.
vector<int> morris_visit(TreeNode *root){
    TreeNode *cur = root;
    vector<int> result;

    while(cur != NULL){
        if(cur->left == NULL){
            result.push_back(cur->val);
            cur = cur->right;
        }else{
            // 'PRE' points to CUR's previous node in the in-order visit.
            TreeNode *pre = cur->left; 
            while(pre->right != NULL && pre->right != cur)
                pre = pre->right;

            if(pre->right == NULL){ // Not threaded yet.
                pre->right = cur;
                cur = cur->left;
            }else{
                pre->right = NULL;
                result.push_back(cur->val);
                cur = cur->right;
            }
        }
    }

    return result;
}


/* Test case.
 */

template<class T>
void print_vector(vector<T> &v){
    bool first = true;

    for(auto val : v){
        if(first){
            first = false;
            cout << val;
        }else
            cout << ", " << val;
    }
    cout << endl;
}

template<class T>
bool is_same_vector(vector<T> &v1, vector<T> &v2){
    if(v1.size() != v2.size())
        return false;

    auto val1 = v1.begin(), val2 = v2.begin();

    for(; val1 != v1.end(); val1 ++, val2 ++){
        if(*val1 != *val2)
            return false;
    }

    return true;
}

int main()
{
    TreeNode n1(1), n2(2), n3(3), n4(4), n5(5), n6(6), n7(7);

    n1.set_leaf(&n2, &n3);
    n2.set_leaf(NULL, &n4);
    n3.set_leaf(&n5, NULL);
    n5.set_leaf(&n6, &n7);
    
    vector<int> v = morris_visit(&n1);
    vector<int> correct_answer = {2, 4, 1, 6, 5, 7, 3};
    
    print_vector(v);

    if(is_same_vector(v, correct_answer))
        cout << "Correct!" << endl;
    else{
        cout << "Wrong! ";
        cout << "The right answer is : ";
        print_vector(correct_answer);
    }

    return 0;
}
